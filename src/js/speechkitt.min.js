(function (a) {
    'use strict'; let b, c, d, e, f, g,
        h = this,
        i = 0,
        j = !1,
        k = 'Activate Voice Control',
        l = 'What can I help you with?',
        m = [],
        n = [],
        o = !1,
        p = function () {
            return g !== a
        },
        q = function () {
            e && p() && (f ? f.href = e : (f = document.createElement('link'), f.rel = 'stylesheet', f.href = e, f.id = 'skitt-style-sheet', document.body.appendChild(f)))
        },
        r = function () {
            if (p()) {
                let a = document.getElementById('skitt-listening-text__samples'); if (m.length) {
                    if (!a) {
                        const b = document.getElementById('skitt-listening-text__instructions'); a = document.createElement('span'), a.id = 'skitt-listening-text__samples', b.parentNode.insertBefore(a, b.nextSibling)
                    }a.innerText = m.join('. ') + '.', g.classList.add('skitt-ui--sample-commands-shown')
                } else {
                    a && a.parentNode.removeChild(a), g.classList.remove('skitt-ui--sample-commands-shown')
                }
            }
        },
        s = function () {
            if (p()) {
                let a = document.getElementById('skitt-listening-text__recognized-sentence'),
                    b = h.SpeechKITT.getLastRecognizedSentence(); if (b && o) {
                        if (!a) {
                            const c = document.getElementById('skitt-listening-text__samples') || document.getElementById('skitt-listening-text__instructions'); a = document.createElement('span'), a.id = 'skitt-listening-text__recognized-sentence', c.parentNode.insertBefore(a, c.nextSibling)
                        }a.innerText = b, g.classList.add('skitt-ui--recognized-sentence-shown')
                    } else {
                        a && a.parentNode.removeChild(a), g.classList.remove('skitt-ui--recognized-sentence-shown')
                    }
            }
        },
        t = function () {
            g = document.createElement('div'), g.id = 'skitt-ui', g.innerHTML = '<a id="skitt-toggle-button">&nbsp;</a><label for="skitt-toggle-button" id="skitt-toggle-button__label">' + k + '</label><div id="skitt-listening-box"><div id="skitt-listening-text"><span id="skitt-listening-text__instructions">' + l + '</span></div></div>', g.style.display = 'none', document.body.appendChild(g), r(), q(), document.getElementById('skitt-toggle-button').addEventListener('click', () => {
                h.SpeechKITT.toggleRecognition()
            })
        },
        u = function () {
            p() && (g.classList.remove('skitt-ui--not-listening'), g.classList.add('skitt-ui--listening'))
        },
        v = function () {
            p() && (g.classList.add('skitt-ui--not-listening'), g.classList.remove('skitt-ui--listening'))
        },
        w = function () {
            j || (j = !0, u())
        },
        x = function () {
            j && (j = !1, v())
        },
        y = function (a, b) {
            p() && (document.getElementById(b).innerHTML = a)
        },
        z = function (a) {
            Array.isArray(a) && (a = a[0]), h.SpeechKITT.setRecognizedSentence(a)
        },
        A = function () {
            const a = new Date(); a.setTime(a.getTime() + 6e4 * i), document.cookie = 'skittremember=1; expires=' + a.toUTCString() + '; path=/'
        },
        B = function () {
            document.cookie = 'skittremember=1; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/'
        },
        C = function () {
            return document.cookie.indexOf('skittremember') !== -1
        },
        D = function (a, b) {
            if (typeof a !== 'function') {
                throw new TypeError(b)
            }
        }; h.SpeechKITT = {abortRecognition() {
            if (!d) {
                throw new TypeError('cannot abort recognition. Abort command not defined')
            }B(), d.callback.apply(d.context), x()
        }, annyang() {
            this.setStartCommand(annyang.start), this.setAbortCommand(annyang.abort), annyang.addCallback('start', this.onStart), annyang.addCallback('end', this.onEnd), annyang.addCallback('resultMatch', z), annyang.addCallback('resultNoMatch', z)
        }, displayRecognizedSentence(a) {
            o = !(arguments.length > 0) || Boolean(a), s()
        }, getLastRecognizedSentence() {
            return n.length === 0 ? a : n[n.length - 1]
        }, hide() {
            if (!p()) {
                throw new TypeError('cannot hide interface. Must be rendered first')
            }g.classList.add('skitt-ui--hidden')
        }, isListening() {
            return j
        }, onEnd() {
            b = setTimeout(x, 100)
        }, onStart() {
            h.clearTimeout(b), w()
        }, rememberStatus(a) {
            if (typeof a !== 'number' || a < 0) {
                throw new TypeError('rememberStatus() only accepts positive integers')
            }i = a
        }, render() {
            p() || t(), C() && !this.isListening() && this.startRecognition(), this.isListening() ? u() : v()
        }, setAbortCommand(a, b) {
            a = h[a] || a, D(a, 'invalid callback function'), b = b || this, d = {callback: a, context: b}
        }, setInstructionsText(a) {
            l = a, y(a, 'skitt-listening-text__instructions')
        }, setRecognizedSentence(a) {
            typeof a === 'string' && (n.push(a), s())
        }, setSampleCommands(a) {
            Array.isArray(a) || (a = []), m = a, r()
        }, setStartCommand(a, b) {
            a = h[a] || a, D(a, 'invalid callback function'), b = b || this, c = {callback: a, context: b}
        }, setStylesheet(a) {
            e = a, q()
        }, setToggleLabelText(a) {
            k = a, y(a, 'skitt-toggle-button__label')
        }, show() {
            if (!p()) {
                throw new TypeError('cannot show interface. Must be rendered first')
            }g.classList.remove('skitt-ui--hidden')
        }, startRecognition() {
            if (!c) {
                throw new TypeError('cannot start recognition. Start command not defined')
            }i && A(), c.callback.apply(c.context), w()
        }, toggleRecognition() {
            j ? this.abortRecognition() : this.startRecognition()
        }, vroom() {
            this.render()
        }}
}).call(this)
